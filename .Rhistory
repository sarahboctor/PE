library(PerformanceAnalytics)
library(ellipse)
library(tseries)
# Manager data
data(managers)
# manager to research here is HAM1 (hypothetical asset manager 1)
# Benchmark Selection (should be done through style analysis which I cannot do in R)
#style.fit and other functions are not currenty available within the factorAnalytics package
#which is apparently the currently available factor analysis package, and FactorAnalytics
#is not currently available for use, but only as a source package for developers
# solutions: 1. do rudimentary style analysis in excel and then import the results into R
# remove data prior to 1997-01-01 b/c HF index is not observed
managers1 = managers["2004::2006",1:6]
#
loadPath = "C:\\Users\\Sarah\\Google Drive\\PROJECT\\"
dev.df = na.omit(read.csv(file=paste(loadPath, "msci eafe.csv", sep=""),
header=TRUE, stringsAsFactors=FALSE))
em.df = na.omit(read.csv(file=paste(loadPath, "EEMfrom2003.csv", sep=""),
header=TRUE, stringsAsFactors=FALSE))
sg.df = na.omit(read.csv(file=paste(loadPath, "small cap growth 2000.csv", sep=""),
header=TRUE, stringsAsFactors=FALSE))
sv.df = na.omit(read.csv(file=paste(loadPath, "small cap value 2000.csv", sep=""),
header=TRUE, stringsAsFactors=FALSE))
lg.df =na.omit( read.csv(file=paste(loadPath, "russell 1000 growth from march 2000.csv", sep=""),
header=TRUE, stringsAsFactors=FALSE))
lv.df = na.omit(read.csv(file=paste(loadPath, "russell 1000 value from march 2000.csv", sep=""),
header=TRUE, stringsAsFactors=FALSE))
# to produce zoo objects
rownames(lg.df) = lg.df$Date
rownames(lv.df) = lv.df$Date
rownames(sv.df) = sv.df$Date
rownames(sg.df) = sg.df$Date
rownames(dev.df) = dev.df$Date
rownames(em.df) = em.df$Date
em.df = em.df[-37, "Adj.Close", drop=FALSE]
dev.df = dev.df[, "Adj.Close", drop=FALSE]
sg.df = sg.df[, "Adj.Close", drop=FALSE]
sv.df = sv.df[, "Adj.Close", drop=FALSE]
lv.df = lv.df[, "Adj.Close", drop=FALSE]
lg.df = lg.df[, "Adj.Close", drop=FALSE]
dates.em = as.Date(rownames(em.df), format="%m/%d/%Y")
dates.sg = as.Date(rownames(sg.df), format="%m/%d/%Y")
dates.dev = as.Date(rownames(dev.df), format="%m/%d/%Y")
dates.sv = as.Date(rownames(sv.df), format="%m/%d/%Y")
dates.lg = as.Date(rownames(lg.df), format="%m/%d/%Y")
dates.lv = as.Date(rownames(lv.df), format="%m/%d/%Y")
Styles=cbind(dev.df,sg.df,sv.df,lv.df,lg.df)
colnames(Styles)=c("Ex-US","Small Growth","Small Value","Large Value","Large Growth")
Style=na.omit(CalculateReturns(xts(Styles, order.by=dates.lg)))
em=na.omit(CalculateReturns(xts(em.df,order.by=dates.em)))
colnames(em)="Emerging"
Managerz=xts(managers1,order.by=dates.em[-1])
#Append the index Values
Managers=na.omit(merge(Managerz["2003::2006"],Style["2003::2006"],em["2003::2006"]))
# Style Indices
chart.CumReturns(Managers[,7:9], main="Cumulative Returns",
wealth.index=TRUE, legend.loc="topleft")
my.panel <- function(...) {
lines(...)
abline(h=0)
}
# plot hedge fund data
plot.zoo(Managers[, 1:6], main="Hedge Fund Returns",
plot.type="multiple", type="h", lwd=2, col="blue",
panel=my.panel)
# plot Style Indices data
plot.zoo(Managers[, 7:10], main="Style Indices Returns",
plot.type="multiple", type="h", lwd=2, col="blue",
panel=my.panel)
# plot cumulative returns using PerformanceAnalytics
# function chart.CumReturns()
# hedge funds
chart.CumReturns(Managers[,1:6], main="Cumulative Returns",
wealth.index=TRUE, legend.loc="topleft")
cor.managers = cor(Managers, use="pairwise.complete.obs")
#ord <- order(cor.managers[1,])
#ordered.cor.managers <- cor.managers[ord, ord]
#I plotted the regular cor matrix, since the ordered one messed up my order!
plotcorr(cor.managers, col=cm.colors(11)[5*cor.managers + 6])
################################################################################
# Sharpe Returns  Model for 6 hedge fund managers
################################################################################
#
# create data frame for regression analysis
#
# with xts objects, you extract data using coredata() and you extract
# dates with index()
Managers.df = as.data.frame(coredata(Managers))
RFR.df=as.data.frame(coredata((managers["2004::2006",10])))
# subtract "US 3m TR" (Risk free rate) from all returns. note: apply() changes
# Managers.df to class "matrix" to coerce result back to data.frame
Managers.df = apply(Managers.df, 2,
function(x) {x - RFR.df})
Managers.df = as.data.frame(Managers.df)
colnames(Managers.df)=colnames(Managers)
rownames(Managers.df) = as.character(index(Managers))
#
index.names=c(colnames(Managers[,7:12]))
manager.names=c(colnames(Managers[,1:6]))
# eliminate spaces in index names which cause problems later if not removed
#index.names = c("EDHEC.LS.EQ", "SP500.TR", "US.10Y.TR")
#colnames(Managers.df)[7:9] = colnames(Managers)[7:9] = index.names
# truncated data set to be used later for graphs
#Managers.zoo = as.zoo(na.omit(Managers[, manager.names]))
# compute descriptive statistics
#
# fund data
table.Stats(Managers[, manager.names])
# index data
table.Stats(Managers[, index.names])
#
# estimate multiple factor model using loop b/c of unequal histories for the hedge funds
#
# initialize list object to hold regression objects
reg.list = list()
# initialize matrices and vectors to hold estimated betas,
# residual variances, and R-square values from
# fitted factor models
Betas = matrix(0, length(manager.names), length(index.names))
colnames(Betas) = index.names
rownames(Betas) = manager.names
Alphas = ResidVars = R2values = rep(0, length(manager.names))
names(Alphas) = names(ResidVars) = names(R2values) = manager.names
# loop over all assets and estimate time series regression
for (i in manager.names) {
reg.df = na.omit(Managers.df[, c(i, index.names)])
fm.formula = as.formula(paste(i,"~", ".", sep=" "))
fm.fit = lm(fm.formula, data=reg.df)
fm.summary = summary(fm.fit)
reg.list[[i]] = fm.fit
Alphas[i] = coef(fm.fit)[1]
Betas[i, ] = coef(fm.fit)[-1]
ResidVars[i] = fm.summary$sigma^2
R2values[i] =  fm.summary$r.squared
}
# examine the elements of reg.list  - they are lm objects!
names(reg.list)
class(reg.list$HAM1)
reg.list$HAM1
summary(reg.list$HAM1)
# plot actual vs. fitted over time for HAM1
# use chart.TimeSeries() function from PerformanceAnalytics package DOESNT CHART
dataToPlot = cbind(fitted(reg.list$HAM1)[-36], na.omit(Managers$HAM1))
colnames(dataToPlot) = c("Fitted","Actual")
chart.TimeSeries(dataToPlot, main="FM fit for HAM1",
colorset=c("black","blue"), legend.loc="bottomleft")
# summarize factor model results
reg.results = cbind(Betas, sqrt(ResidVars), R2values)
colnames(reg.results)[7] = "ResidSD"
reg.results
#
# compute factor model covariance matrix
#
# risk factor sample covariance matrix
cov.factors = var(Managers.df[, index.names])
# FM covariance matrix
cov.fm = Betas%*%cov.factors%*%t(Betas) + diag(ResidVars)
# FM correlation matrix
cor.fm = cov2cor(cov.fm)
# plot correlations using plotcorr() from ellipse package
rownames(cor.fm) = colnames(cor.fm)
ord <- order(cor.fm[1,])
ordered.cor.fm <- cor.fm[ord, ord]
plotcorr(cor.fm, col=cm.colors(11)[5*cor.fm + 6])
#
# portfolio factor model
#
# equally weighted portfolio of 6 hedge funds
w.vec = rep(1,6)/6
names(w.vec) = manager.names
w.vec
# portfolio returns. Note: need to eliminate NA values from HAM5 and HAM6
r.p = as.matrix(na.omit(Managers[, manager.names]))%*%w.vec
r.p.zoo = zoo(r.p, as.yearmon(rownames(r.p)))
# portfolio factor model
alpha.p = as.numeric(crossprod(Alphas,w.vec))
beta.p = t(Betas)%*%w.vec
var.p.systematic = t(beta.p)%*%cov.factors%*%beta.p
var.p.resid = t(w.vec)%*%diag(ResidVars)%*%w.vec
var.fm.p = var.p.systematic + var.p.resid
var.fm.p = as.numeric(var.fm.p)
r.square.p = as.numeric(var.p.systematic/var.fm.p)
fm.p = c(alpha.p, beta.p, sqrt(var.fm.p), r.square.p)
names(fm.p) = c("intercept", index.names, "sd", "r-squared")
fm.p
# factor model residuals - need to extract over truncated sample
# will be use later in factor risk budgeting
fm.resid = rep(0, nrow(r.p))
smpl = rownames(r.p)
for (i in manager.names) {
reg.resid = residuals(reg.list[[i]])
fm.resid = fm.resid + w.vec[i]*reg.resid[smpl]
}
################################################################################
# Risk Measures
################################################################################
#
# use jarque.bera.test() function from tseries package to test for normality
#
# use jarque.bera.test() function from tseries package to test for normality
jarque.bera.test(Managers.df$HAM1)
jarque.bera.test(Managers.df$HAM2)
jarque.bera.test(Managers.df$HAM3)
jarque.bera.test(Managers.df$HAM4)
jarque.bera.test(na.omit(Managers.df$HAM5))
jarque.bera.test(na.omit(Managers.df$HAM6))
# use apply() to do everything at once
normalTest = function(x) {
tmp.test = jarque.bera.test(na.omit(x))
ans = c(tmp.test$statistic, tmp.test$p.value)
names(ans) = c("statistic", "p-value")
return(ans)
}
apply(Managers.df[, manager.names], 2, normalTest)
save.image("C:/Users/Sarah/Google Drive/PerformanceAnalytics/PerformanceAnalytics.Rproj.RData")
x
header=TRUE, stringsAsFactors=FALSE))
sv.df = na.omit(read.csv(file=paste(loadPath, "small cap value 2000.csv", sep=""),
header=TRUE, stringsAsFactors=FALSE))
sv.df = na.omit(read.csv(file=paste(loadPath, "small cap value 2000.csv", sep=""),
header=TRUE, stringsAsFactors=FALSE))
data(managers)
library(tseries)
library(ellipse)
library(PerformanceAnalytics)
library(PerformanceAnalytics)
library(PerformanceAnalytics)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(Managerz)
View(Managers)
rownames(Managers)
index(Managers)
length(index(managers))
length(index(Managers))
nrow(Managers.df)
Managers.df = as.data.frame(coredata(Managers))
RFR.df=as.data.frame(coredata((managers["2004::2006",10])))
nrow(Managers.df)
nrow(RFR.DF)
nrow(RFR.df)
index(Managers.df)
index(Managers)
rownames(managers["2004::2006"])
managers["2004::2006"
]
Managers=(merge(Managerz["2003::2006"],Style["2003::2006"],em["2003::2006"]))
index(Managers)
View(Managers)
managers1 = managers["2004::2008",1:6]
Managers=(merge(Managerz["2003::2006"],Style["2003::2006"],em["2003::2006"]))
View(Managers)
managers1 = managers["2004::2008",1:6]
Managerz=xts(managers1,order.by=dates.em[-1])
Managers=(merge(Managerz["2003::2006"],Style["2003::2006"],em["2003::2006"]))
View(Managers)
View(Managerz)
Managers=na.omit(merge(Managerz["2003::2006"],Style["2003::2006"],em["2003::2006"]))
View(Managers)
RFR.df=as.data.frame(coredata((managers["2004::2006"-36,10])))
RFR.df=as.data.frame(coredata((managers["2004::2006",10][-1])))
RFR.df=as.data.frame(coredata((managers["2004::2006",10][-36])))
rownames(RFR.df)
# Managers.df to class "matrix" to coerce result back to data.frame
function(x) {x - RFR.df})
Managers.df = apply(Managers.df, 2,
function(x) {x - RFR.df})
Managers.df = as.data.frame(Managers.df)
colnames(Managers.df)=colnames(Managers)
rownames(Managers.df) = as.character(index(Managers))
#
manager.names=c(colnames(Managers[,1:6]))
index.names=c(colnames(Managers[,7:12]))
table.Stats(Managers[, manager.names])
# index data
table.Stats(Managers[, index.names])
chart.CumReturns(Managers[,7:9], main="Cumulative Returns",
wealth.index=TRUE, legend.loc="topleft")
my.panel <- function(...) {
lines(...)
abline(h=0)
}
# plot hedge fund data
plot.zoo(Managers[, 1:6], main="Hedge Fund Returns",
plot.type="multiple", type="h", lwd=2, col="blue",
panel=my.panel)
plot.zoo(Managers[, 7:10], main="Style Indices Returns",
plot.type="multiple", type="h", lwd=2, col="blue",
panel=my.panel)
chart.CumReturns(Managers[,1:6], main="Cumulative Returns",
wealth.index=TRUE, legend.loc="topleft")
Betas = matrix(0, length(manager.names), length(index.names))
colnames(Betas) = index.names
rownames(Betas) = manager.names
Alphas = ResidVars = R2values = rep(0, length(manager.names))
names(Alphas) = names(ResidVars) = names(R2values) = manager.names
2 != 3
