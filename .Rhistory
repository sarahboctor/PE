colnames(tmpData)[1]="porfolio"
colnames(tmpData)[8]="residual"
colnames(tmpData)[3]="residual"
factor.es.decomp.list[["portfolio"]] = factorModelFactorEsDecomposition(tmpData, beta.p,
var.p.resid, tail.prob=0.05)
tmpData = cbind(HP, Managers.df[rownames(HP),index.names],
fm.resid/sqrt(as.numeric(var.p.resid)))
head(tmpData)
tmpData = cbind(HP, Managers.df[rownames(HP),index.names],
fm.resid/sqrt(as.numeric(var.p.resid)))
tmpData
Managers.df[rownames(HP)
Managers.df[rownames(HP),index.names]
head(Managers)
View(Managers)
View(Managerz)
tmpData = cbind(HP, Managerz[rownames(HP),index.names],
fm.resid/sqrt(as.numeric(var.p.resid)))
class(HP)
class(Managerz)
Managerz[rownames(HP),index.names]
View(Managerz)
View(HP)
Managerz=xts(managers1,order.by=dates.em[-1])
View(Managerz)
Managerz=xts(managers1,order.by=dates.em[-1,])
Managerz=xts(managers1,order.by=dates.em)[-1]
Managerz=xts(managers1[-1],order.by=dates.em)
length(dates.em)
length(managers1)
nrow(managers1)
dates=dates.em[-1]
dates=dates.em[-37]
length(dates)
Managerz=xts(managers1[-1],order.by=dates.em[-37])
Managerz=xts(managers1,order.by=dates.em[-37])
View(Managerz)
tmpData = cbind(HP, Managerz[rownames(HP),index.names],
fm.resid/sqrt(as.numeric(var.p.resid)))
tmpData = cbind(HP,Managerz[rownames(HP),index.names],
fm.resid/sqrt(as.numeric(var.p.resid)))
index.names
factor.es.decomp.list = list()
for (i in manager.names) {
# check for missing values in fund data
idx = which(!is.na(Managerz[,i]))
tmpData = cbind(Managerz[idx,i], Managers.df[idx,index.names],
residuals(reg.list[[i]])/sqrt(ResidVars[i]))
colnames(tmpData)[c(1,5)] = c(manager.names[i], "residual")
factor.es.decomp.list[[i]] = factorModelFactorEsDecomposition(tmpData, Betas[i,],
ResidVars[i], tail.prob=0.05)
}
factor.es.decomp.list = list()
for (i in manager.names) {
# check for missing values in fund data
idx = which(!is.na(Managerz[,i]))
tmpData = cbind(Managerz[idx,i], Managerz[idx,index.names],
residuals(reg.list[[i]])/sqrt(ResidVars[i]))
colnames(tmpData)[c(1,5)] = c(manager.names[i], "residual")
factor.es.decomp.list[[i]] = factorModelFactorEsDecomposition(tmpData, Betas[i,],
ResidVars[i], tail.prob=0.05)
}
# compute decomposition in loop
factor.es.decomp.list = list()
for (i in manager.names) {
# check for missing values in fund data
idx = which(!is.na(Managerz[,i]))
tmpData = cbind(Managerz[idx,i], Managerz[idx,index.names],
residuals(reg.list[[i]])/sqrt(ResidVars[i]))
colnames(tmpData)[c(1,5)] = c(manager.names[i], "residual")
factor.es.decomp.list[[i]] = factorModelFactorEsDecomposition(tmpData, Betas[i,],
ResidVars[i], tail.prob=0.05)
}
# add portfolo retsults - need factor model residuals
tmpData = cbind(HP,Managerz[rownames(HP),index.names],
fm.resid/sqrt(as.numeric(var.p.resid)))
colnames(tmpData)[c(1,8)] = c("portfolio", "residual")
factor.es.decomp.list[["portfolio"]] = factorModelFactorEsDecomposition(tmpData, beta.p,
var.p.resid, tail.prob=0.05)
# stacked bar charts of percent contributions to SD
getCETL = function(x) {
x$cES.fm
}
# report as positive number
cr.etl = sapply(factor.es.decomp.list, getCETL)
rownames(cr.etl) = c(index.names, "residual")
barplot(cr.etl, main="Factor Contributions to ETL",
horiz  = TRUE,
#         legend=NULL,
cex.names=0.5,
las    = 1,
#         names.arg=c("CA","CTA","DS","EM","EN","Event","FIA","GM","LSE","MA","RV","SS","FoF"),
xlab="Percent Contribution",
legend=T,
col=brewer.pal(12, "Set3"))
#
# illustrate with graphic. Plot fund returns, VaR line and factor returns. Identify
# those periods when fund return is less than its VaR, then look at where the
# factor returns are and compute average
#
HP.df=as.data.frame(HP[-36])
tmpData = cbind(HP.df, Managers.df[,index.names],
residuals(reg.list[[1]])/sqrt(ResidVars[1]))
colnames(tmpData)[c(1,7)] = c("Portfolio", "residual")
# create zoo data for time series plots
tmpData.zoo = zoo(tmpData, as.Date(rownames(tmpData)))
# find those observations less than VaR
VaR.fm = quantile(tmpData[, 1], prob=0.05)
idx = which(tmpData[, 1] <= VaR.fm)
rownames(tmpData)[idx]
# average factor data at obvs idx
mcETL.Ex.US = mean(tmpData[idx, 2])
mcETL.Small.Growth = mean(tmpData[idx, 3])
mcETL.Small.Value = mean(tmpData[idx, 4])
mcETL.residual = mean(tmpData[idx, 7])
# mcETL plot for EDHEC.LS.EQ
par(mfrow=c(2,1))
# plot fund data with VaR violations
plot.zoo(tmpData.zoo[,1], type="b", main="Portfolio returns and 5% VaR Violations",
col="blue", ylab="Returns")
abline(h=0)
abline(h=VaR.fm, lwd=2, col="red")
points(tmpData.zoo[idx, 1], type="p", pch=16, col="red")
# plot factor data and highlight obvs associated with R <= VaR
plot.zoo(tmpData.zoo[,2], type="b", main="Mean of Ex-US Index when Portfolio <= 5% VaR",
col="blue", ylab="Returns")
abline(h=0)
abline(h=mcETL.Ex.US , lwd=2, col="red")
points(tmpData.zoo[idx, 2], type="p", pch=16, col="red")
par(mfrow=c(1,1))
# mcETL plot for Small Growth
par(mfrow=c(2,1))
# plot fund data with VaR violations
plot.zoo(tmpData.zoo[,1], type="b", main="Portfolio returns and 5% VaR Violations",
col="blue", ylab="Returns")
abline(h=0)
abline(h=VaR.fm, lwd=2, col="red")
points(tmpData.zoo[idx, 1], type="p", pch=16, col="red")
# plot factor data and highlight obvs associated with R <= VaR
plot.zoo(tmpData.zoo[,3], type="b", main="Mean of Small.Growth when Portfolio <= 5% VaR",
col="blue", ylab="Returns")
abline(h=0)
abline(h=mcETL.Small.Growth, lwd=2, col="red")
points(tmpData.zoo[idx, 3], type="p", pch=16, col="red")
par(mfrow=c(1,1))
# mcETL plot for residual
par(mfrow=c(2,1))
# plot fund data with VaR violations
plot.zoo(tmpData.zoo[,1], type="b", main="Global.Macro returns and 5% VaR Violations",
col="blue", ylab="Returns")
abline(h=0)
abline(h=VaR.fm, lwd=2, col="red")
points(tmpData.zoo[idx, 1], type="p", pch=16, col="red")
# plot factor data and highlight obvs associated with R <= VaR
plot.zoo(tmpData.zoo[, 8], type="b", main="Mean of Standardized Residual when Global.Macro <= 5% VaR",
col="blue", ylab="Returns")
abline(h=0)
abline(h=mcETL.residual, lwd=2, col="red")
points(tmpData.zoo[idx, 8], type="p", pch=16, col="red")
par(mfrow=c(1,1))
################################################################################
# portfolio risk budgeting
################################################################################
#
# fund contribution to portfolio SD
#
# compute with sample covariance matrix (pairwise complete obvs)
cov.sample = cov(Managers.df[,manager.names],
use="pairwise.complete.obs")
port.sd.decomp.sample = portfolioSdDecomposition(w.vec, cov.sample)
names(port.sd.decomp.sample)
chart.Histogram(HP,methods = c("add.density", "add.rug","add.risk"),show.outliers=TRUE)
chart.Histogram(sp500,methods = c("add.density", "add.rug","add.risk"),show.outliers=TRUE)
chart.BarVaR(HP, width = 0, gap = 6, methods ="HistoricalES",show.greenredbars=TRUE)
port.sd.decomp.sample
# show bar chart
names=as.vector(manager.names)
par(cex=0.65)
par(oma = c(1, 1, 1, 1))  # Outside margins: b, l, t, r
par(mar = c(4, 5, 2, 1))  # Sets plot margins
barplot(port.sd.decomp.sample$pcsd.p,
main="Fund Percent Contributions to Portfolio SD",
horiz  = TRUE,
#                    axisnames=FALSE,
las    = 1,  # Orientation of axis labels,
cex.names=0.9,
names.arg=c("CA","CTA","DS","EM","EN","Event","FIA","GM","LSE","MA","RV","SS","FoF"),
ylab="Percent Contribution",
col=brewer.pal(6, "Greens"))
# legend("topleft",legend=c( "Convertible.Arbitrage" , "CTA.Global"      ,       "Distressed.Securities"
#                            ,"Emerging.Markets"    ,   "Equity.Market.Neutral" , "Event.Driven"
#                            ,"Fixed.Income.Arbitrage" ,"Global.Macro"   ,        "Long.Short.Equity"
#                            ,"Merger.Arbitrage"   ,    "Relative.Value"  ,       "Short.Selling"
#                            ,"Funds.of.Funds"))
# compute with factor model covariance matrix
port.sd.decomp.fm = portfolioSdDecomposition(w.vec, cov.fm)
port.sd.decomp.fm
#
# fund contribution to portfolio ETL
#
# use ES() function in PerformanceAnalytics package
# need to remove missing values prior to computation
port.ES.decomp = ES(na.omit(Managers.df[,manager.names]),
p=0.95, method="historical",
portfolio_method = "component",
weights = w.vec)
port.ES.decomp
port.ES.decomp = portfolioEsDecomposition(na.omit(Managers.df[,manager.names]),
w.vec, tail.prob=0.05)
names(port.ES.decomp)
port.ES.decomp
# show bar chart
barplot(port.ES.decomp$PCES,
main="Fund Percent Contributions to Portfolio ETL",
horiz  = TRUE,
#                    axisnames=FALSE,
las    = 1,  # Orientation of axis labels,
cex.names=0.9,
names.arg=c("CA","CTA","DS","EM","EN","Event","FIA","GM","LSE","MA","RV","SS","FoF"),
ylab="Percent Contribution",
col=brewer.pal(6, "Greens"))
## graphical illustration of func marginal contribution to portfolio ETL
# find those observations less than VaR
nrow(HP)
VaR.p = quantile(HP, prob=0.05)
idx = which(HP.df <= VaR.p)
rownames(HP.df)[idx]
mcES = port.ES.decomp$MCES
# mcETL plot for Global.Macro
par(mfrow=c(2,1))
# plot fund data with VaR violations
plot.zoo(HP, type="b", main="Portfolio Returns and 5% VaR Violations",
col="blue", ylab="Returns")
abline(h=0)
abline(h=VaR.p, lwd=2, col="red")
points(HP[idx], type="p", pch=16, col="green")
# plot factor data and highlight obvs associated with R <= VaR
plot.zoo(Managers[, "Global.Macro"], type="b", main="Mean of Global.Macro when PORT <= 5% VaR",
col="blue", ylab="Returns",ylim=c(-0.02,0.03))
abline(h=0)
abline(h=-mcES[1,"Global.Macro"], lwd=2, col="red")
points(Managers[idx, "Global.Macro"], type="p", pch=16, col="red")
par(mfrow=c(1,1))
# mcETL plot for Emerging
par(mfrow=c(2,1))
# plot fund data with VaR violations
plot.zoo(HP, type="b", main="Portfolio Returns and 5% VaR Violations",
col="blue", ylab="Returns")
abline(h=0)
abline(h=VaR.p, lwd=2, col="red")
points(HP[idx], type="p", pch=16, col="red")
# plot factor data and highlight obvs associated with R <= VaR
plot.zoo(Managers[, "Emerging.Markets"], type="b", main="Mean of Emerging when PORT <= 5% VaR",
col="blue", ylab="Returns")
abline(h=0)
abline(h=-mcES[,"Emerging.Markets"], lwd=2, col="red")
points(Managers[idx, "Emerging.Markets"], type="p", pch=16, col="red")
par(mfrow=c(1,1))
################################################################################
# factor model Monte Carlo
################################################################################
# examime distribution of residuals
hist(residuals(reg.list$Global.Macro))
qqnorm(residuals(reg.list$Global.Macro))
qqline(residuals(reg.list$Global.Macro))
#
# FMMC with normal distribution for factor model residuals
#
# resample from historical factors
n.boot = 5000
# set random number sed
set.seed(123)
# reshuffled indices with replacement
bootIdx = sample(nrow(Managers.df),  n.boot, replace=TRUE)
# resampled factor data
factorDataBoot.mat = as.matrix(Managers.df[bootIdx, index.names])
# FMMC using normal distribution for residuals and alpha = 0
returns.boot = matrix(0, n.boot, length(manager.names))
resid.sim = matrix(0, n.boot, length(manager.names))
colnames(returns.boot) = colnames(resid.sim) = manager.names
for (i in manager.names) {
returns.fm = factorDataBoot.mat%*%Betas[i, ]
resid.sim[, i] = rnorm(n.boot,sd=sqrt(ResidVars[i]))
returns.boot[, i] = returns.fm + resid.sim[, i]
}
# compute FMMC portfolio returns and factor model residuals
HP.boot = returns.boot%*%w.vec
resid.fm.p = resid.sim%*%w.vec
#
# compute factor contributions to ETL using FMMC sample
#
# compute decomposition in loop
factor.es.decomp.list = list()
for (i in manager.names) {
tmpData = cbind(returns.boot[, i], factorDataBoot.mat,
resid.sim[, i]/sqrt(ResidVars[i]))
colnames(tmpData)[c(1,5)] = c(manager.names[i], "residual")
factor.es.decomp.list[[i]] = factorModelFactorEsDecomposition(tmpData, Betas[i,],
ResidVars[i], tail.prob=0.05)
}
# add portfolo retsults - need factor model residuals
tmpData = cbind(HP.boot, factorDataBoot.mat,
resid.fm.p/sqrt(as.numeric(var.p.resid)))
colnames(tmpData)[c(1,5)] = c("PORT", "residual")
factor.es.decomp.list[["PORT"]] = factorModelFactorEsDecomposition(tmpData, beta.p,
var.p.resid, tail.prob=0.05)
# stacked bar charts of percent contributions to SD
getCETL = function(x) {
x$cES.fm
}
# report as positive number
cr.etl = sapply(factor.es.decomp.list, getCETL)
rownames(cr.etl) = c(index.names, "residual")
barplot(cr.etl, main="Factor Contributions to ETL",
legend.text=T, args.legend=list(x="topleft"),
col=brewer.pal(12,"Set2"))
#
# compute fund contributions to ETL using FMMC sample
#
port.ES.decomp.fmmc = portfolioEsDecomposition(returns.boot,
w.vec, tail.prob=0.05)
port.ES.decomp.fmmc
# show bar chart
barplot(port.ES.decomp.fmmc$PCES,
main="Fund Percent Contributions to Portfolio ETL",
horiz  = TRUE,
#                    axisnames=FALSE,
las    = 1,  # Orientation of axis labels,
cex.names=0.9,
names.arg=c("CA","CTA","DS","EM","EN","Event","FIA","GM","LSE","MA","RV","SS","FoF"),
ylab="Percent Contribution",
col=brewer.pal(6, "Greens"))
# Conducting Style Analysis
# add Cash to the asset classes
Styles=cbind(Style["2004::2006",],Cash)
nrow(Styles)
HP.df=as.data.frame(HP[-36])
tmpData = cbind(HP.df, Managers.df[,index.names],
residuals(reg.list[[1]])/sqrt(ResidVars[1]))
colnames(tmpData)[c(1,7)] = c("Portfolio", "residual")
# create zoo data for time series plots
tmpData.zoo = zoo(tmpData, as.Date(rownames(tmpData)))
# find those observations less than VaR
VaR.fm = quantile(tmpData[, 1], prob=0.05)
idx = which(tmpData[, 1] <= VaR.fm)
rownames(tmpData)[idx]
# average factor data at obvs idx
mcETL.Ex.US = mean(tmpData[idx, 2])
mcETL.Small.Growth = mean(tmpData[idx, 3])
mcETL.Small.Value = mean(tmpData[idx, 4])
mcETL.residual = mean(tmpData[idx, 7])
# mcETL plot for EDHEC.LS.EQ
par(mfrow=c(2,1))
# plot fund data with VaR violations
plot.zoo(tmpData.zoo[,1], type="b", main="Portfolio returns and 5% VaR Violations",
col="blue", ylab="Returns")
abline(h=0)
abline(h=VaR.fm, lwd=2, col="red")
points(tmpData.zoo[idx, 1], type="p", pch=16, col="red")
# plot factor data and highlight obvs associated with R <= VaR
plot.zoo(tmpData.zoo[,2], type="b", main="Mean of Ex-US Index when Portfolio <= 5% VaR",
col="blue", ylab="Returns")
abline(h=0)
abline(h=mcETL.Ex.US , lwd=2, col="red")
points(tmpData.zoo[idx, 2], type="p", pch=16, col="red")
par(mfrow=c(1,1))
# compute with sample covariance matrix (pairwise complete obvs)
cov.sample = cov(Managers.df[,manager.names],
use="pairwise.complete.obs")
port.sd.decomp.sample = portfolioSdDecomposition(w.vec, cov.sample)
names(port.sd.decomp.sample)
chart.Histogram(HP,methods = c("add.density", "add.rug","add.risk"),show.outliers=TRUE)
chart.Histogram(sp500,methods = c("add.density", "add.rug","add.risk"),show.outliers=TRUE)
chart.BarVaR(HP, width = 0, gap = 6, methods ="HistoricalES",show.greenredbars=TRUE)
port.sd.decomp.sample
names=as.vector(manager.names)
par(cex=0.65)
par(oma = c(1, 1, 1, 1))  # Outside margins: b, l, t, r
par(mar = c(4, 5, 2, 1))  # Sets plot margins
barplot(port.sd.decomp.sample$pcsd.p,
main="Fund Percent Contributions to Portfolio SD",
horiz  = TRUE,
#                    axisnames=FALSE,
las    = 1,  # Orientation of axis labels,
cex.names=0.9,
names.arg=c("CA","CTA","DS","EM","EN","Event","FIA","GM","LSE","MA","RV","SS","FoF"),
ylab="Percent Contribution",
col=brewer.pal(6, "Greens"))
port.sd.decomp.fm = portfolioSdDecomposition(w.vec, cov.fm)
port.sd.decomp.fm
port.ES.decomp = ES(na.omit(Managers.df[,manager.names]),
p=0.95, method="historical",
portfolio_method = "component",
weights = w.vec)
port.ES.decomp = portfolioEsDecomposition(na.omit(Managers.df[,manager.names]),
barplot(port.ES.decomp$PCES,
main="Fund Percent Contributions to Portfolio ETL",
horiz  = TRUE,
#                    axisnames=FALSE,
las    = 1,  # Orientation of axis labels,
cex.names=0.9,
names.arg=c("CA","CTA","DS","EM","EN","Event","FIA","GM","LSE","MA","RV","SS","FoF"),
ylab="Percent Contribution",
col=brewer.pal(6, "Greens"))
barplot(port.ES.decomp$PCES,
main="Fund Percent Contributions to Portfolio ETL",
horiz  = TRUE,
#                    axisnames=FALSE,
las    = 1,  # Orientation of axis labels,
cex.names=0.9,
names.arg=c("CA","CTA","DS","EM","EN","Event","FIA","GM","LSE","MA","RV","SS","FoF"),
ylab="Percent Contribution",
col=brewer.pal(6, "Greens"))
barplot(port.ES.decomp$PCES,
main="Fund Percent Contributions to Portfolio ETL",
horiz  = TRUE,
#                    axisnames=FALSE,
las    = 1,  # Orientation of axis labels,
cex.names=0.9,
names.arg=c("CA","CTA","DS","EM","EN","Event","FIA","GM","LSE","MA","RV","SS","FoF"),
ylab="Percent Contribution",
col=brewer.pal(6, "Greens"))
port.ES.decomp = portfolioEsDecomposition(na.omit(Managers.df[,manager.names]),
w.vec, tail.prob=0.05)
names(port.ES.decomp)
port.ES.decomp
barplot(port.ES.decomp$PCES,
main="Fund Percent Contributions to Portfolio ETL",
horiz  = TRUE,
#                    axisnames=FALSE,
las    = 1,  # Orientation of axis labels,
cex.names=0.9,
names.arg=c("CA","CTA","DS","EM","EN","Event","FIA","GM","LSE","MA","RV","SS","FoF"),
ylab="Percent Contribution",
col=brewer.pal(6, "Greens"))
nrow(HP)
VaR.p = quantile(HP, prob=0.05)
idx = which(HP.df <= VaR.p)
rownames(HP.df)[idx]
mcES = port.ES.decomp$MCES
# mcETL plot for Global.Macro
par(mfrow=c(2,1))
# plot fund data with VaR violations
plot.zoo(HP, type="b", main="Portfolio Returns and 5% VaR Violations",
col="blue", ylab="Returns")
abline(h=0)
abline(h=VaR.p, lwd=2, col="red")
points(HP[idx], type="p", pch=16, col="green")
# plot factor data and highlight obvs associated with R <= VaR
plot.zoo(Managers[, "Global.Macro"], type="b", main="Mean of Global.Macro when PORT <= 5% VaR",
col="blue", ylab="Returns",ylim=c(-0.02,0.03))
abline(h=0)
abline(h=-mcES[1,"Global.Macro"], lwd=2, col="red")
points(Managers[idx, "Global.Macro"], type="p", pch=16, col="red")
par(mfrow=c(1,1))
hist(residuals(reg.list$Global.Macro))
qqnorm(residuals(reg.list$Global.Macro))
qqline(residuals(reg.list$Global.Macro))
#
# resample from historical factors
n.boot = 5000
# set random number sed
set.seed(123)
# reshuffled indices with replacement
bootIdx = sample(nrow(Managers.df),  n.boot, replace=TRUE)
# resampled factor data
factorDataBoot.mat = as.matrix(Managers.df[bootIdx, index.names])
# FMMC using normal distribution for residuals and alpha = 0
returns.boot = matrix(0, n.boot, length(manager.names))
resid.sim = matrix(0, n.boot, length(manager.names))
colnames(returns.boot) = colnames(resid.sim) = manager.names
for (i in manager.names) {
returns.fm = factorDataBoot.mat%*%Betas[i, ]
resid.sim[, i] = rnorm(n.boot,sd=sqrt(ResidVars[i]))
returns.boot[, i] = returns.fm + resid.sim[, i]
}
# compute FMMC portfolio returns and factor model residuals
HP.boot = returns.boot%*%w.vec
resid.fm.p = resid.sim%*%w.vec
factor.es.decomp.list = list()
for (i in manager.names) {
tmpData = cbind(returns.boot[, i], factorDataBoot.mat,
resid.sim[, i]/sqrt(ResidVars[i]))
colnames(tmpData)[c(1,5)] = c(manager.names[i], "residual")
factor.es.decomp.list[[i]] = factorModelFactorEsDecomposition(tmpData, Betas[i,],
ResidVars[i], tail.prob=0.05)
}
# add portfolo retsults - need factor model residuals
tmpData = cbind(HP.boot, factorDataBoot.mat,
resid.fm.p/sqrt(as.numeric(var.p.resid)))
colnames(tmpData)[c(1,5)] = c("PORT", "residual")
factor.es.decomp.list[["PORT"]] = factorModelFactorEsDecomposition(tmpData, beta.p,
var.p.resid, tail.prob=0.05)
# stacked bar charts of percent contributions to SD
getCETL = function(x) {
x$cES.fm
}
# report as positive number
cr.etl = sapply(factor.es.decomp.list, getCETL)
rownames(cr.etl) = c(index.names, "residual")
barplot(cr.etl, main="Factor Contributions to ETL",
legend.text=T, args.legend=list(x="topleft"),
col=brewer.pal(12,"Set2"))
barplot(cr.etl, main="Factor Contributions to ETL",
horiz  = TRUE,
#         legend=NULL,
cex.names=0.5,
las    = 1,
#         names.arg=c("CA","CTA","DS","EM","EN","Event","FIA","GM","LSE","MA","RV","SS","FoF"),
xlab="Percent Contribution",
legend=T,
col=brewer.pal(12, "Set3"))
